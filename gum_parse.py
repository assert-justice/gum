import argparse

def parse(create, build, run, install, acp, add, version):
    parser = argparse.ArgumentParser(prog="gum", description="an app to play around with argparse")
    parser.add_argument("-v", "--version", action="version", version=version)
    subparsers = parser.add_subparsers()

    create_parser = subparsers.add_parser("create", aliases=["c"], help="Create a new gum project. It creates a directory with the name specified, builds a directory tree complete with template files, and adds source control.")
    create_parser.set_defaults(func=create)
    create_parser.add_argument("name", help="The name of your new project")
    create_parser.add_argument("-c", "--compiler", default="gcc", help="Specify a compiler for the project's use.")
    create_parser.add_argument("-l", "--language", choices=["c", "c++"], default="c", help="Specify the project's language ('c' and 'c++' are currently supported).")
    create_parser.add_argument("--header", choices=[".h", ".hpp"], default=".h", help="Specify the file extension used for header files.")
    create_parser.add_argument("--src", choices=[".c", ".cpp"], default=".c", help="Specify the file extension used for source files.")
    create_parser.add_argument("--vcs", choices=["git", "none"], default="git", help="Specify the version control system for the project ('none' and 'git' is currently supported).")

    build_parser = subparsers.add_parser("build", aliases=["b"], help="Compile the project as an executable.")
    build_parser.set_defaults(func=build)
    build_parser.add_argument("-r","--release", action="store_true", help="Compile using release settings.")
    #build_parser.add_argument("-f","--full", action="store_true", help="Recompile all source files, do not use incremental builds.")
    build_parser.add_argument("--compile_libs", action="store_true", help="Recompile all libraries in the deps directory.")
    group = build_parser.add_mutually_exclusive_group()
    #group.add_argument("-a","--all", action="store_true", help="Compile to all configured targets. Not yet implemented.")
    group.add_argument("-t","--target", choices=["win","osx","gnu"], help="Specify compile target if different than current machine.")
    build_parser.add_argument("-o", type=int, choices=[0,1,2,3], help="Override the default optimization level.")

    run_parser = subparsers.add_parser("run", aliases=["r"], help="Builds and runs the project assuming no errors or warnings. All commands work identically.")
    run_parser.set_defaults(func=run)
    run_parser.add_argument("-r","--release", action="store_true", help="Compile using release settings.")
    #run_parser.add_argument("-f","--full", action="store_true", help="Recompile all source files, do not use incremental builds.")
    run_parser.add_argument("--compile_libs", action="store_true", help="Recompile all libraries in the deps directory.")
    group = run_parser.add_mutually_exclusive_group()
    #group.add_argument("-a","--all", action="store_true", help="Compile to all configured targets.")
    group.add_argument("-t","--target", choices=["win","osx","gnu"], help="Specify compile target if different than current machine.")
    run_parser.add_argument("-o", type=int, choices=[0,1,2,3], help="Override the default optimization level.")

    install_parser = subparsers.add_parser("install", aliases=["i"], help="Clone a library into the deps folder and configure it.")
    install_parser.set_defaults(func=install)
    install_parser.add_argument("url")
    install_parser.add_argument("-d", "--dynamic", action="store_true", help="Configure library as dynamically linked. Static is a default.")
    install_parser.add_argument("-m", "--manual", action="store_true", help="Indicates that headers should not be automatically placed in the project's include file. For pesky libraries with specific include instructions.")
    install_parser.add_argument("--defer", action="store_true", help="Indicates that a library should not be built yet. Default is to build on install.")

    acp_parser = subparsers.add_parser("acp")
    acp_parser.add_argument("message")
    acp_parser.set_defaults(func=acp)

    add_parser = subparsers.add_parser("add", help="adds a matching header / source file at `src/name`")
    add_parser.set_defaults(func=add)
    add_parser.add_argument("path")
    add_parser.add_argument("name")
    args = parser.parse_args()
    out = args.__dict__.copy()
    out.pop("func")
    args.func(out)